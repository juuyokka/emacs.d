#+TITLE: Emacs Config
#+AUTHOR: 7actose
#+PROPERTY: header-args :tangle post-init.el
#+AUTO_TANGLE: t

This configuration is based on James Cherti's [[https://github.com/jamescherti/minimal-emacs.d][minimal-emacs.d]]. It is a minimal base configuration with sane defaults and is optimized for fast startup times. On my machine, I consistently get init times under 300 ms according to =M-x emacs-init-time=.

* Package Management

I use =straight.el= for package management instead of the builtin =package.el=.

#+begin_src emacs-lisp :tangle pre-init.el
  ;; bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
#+end_src

#+begin_src emacs-lisp :tangle post-early-init.el
  ;; disable package.el
  (setq package-enable-at-startup nil)
#+end_src

#+begin_src emacs-lisp :tangle post-early-init.el
  (setq minimal-emacs-package-initialize-and-refresh nil)
#+end_src

* Packages

** Org Mode

If you're viewing this file in Emacs, you're looking at =org-mode= already! =org-mode= is an outliner and markup language similar to Markdown. I modified some keybindings for editing source blocks for better tempo.

#+begin_src emacs-lisp
  (use-package org
    :straight (:type built-in)
    :bind (:map org-mode-map
	   ("C-c C-'" . org-edit-special)
	   ("C-c '"   . nil)
	   :map org-src-mode-map
	   ("C-c C-'" . org-edit-src-exit)
	   ("C-c '"   . nil)))
#+end_src

*** org-tree-slide

Allows using org-mode buffers as presentations.

#+begin_src emacs-lisp
  (use-package org-tree-slide
    :straight t
    :after org
    :custom
    (org-tree-slide-slide-in-effect nil))
#+end_src

*** org-auto-tangle

Allows org-mode code blocks to be automatically exported when saved. That way this file acts as my configuration.

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :straight t
    :hook (org-mode . org-auto-tangle-mode))
#+end_src

** dired

A builtin package for file management. It's quite powerful but can be intimidating at first.

=dired= displays the contents of a directory using =ls=. By default it invokes =ls= with the switches "-al". I changed this value to something a little more sensible for file management.

#+begin_src emacs-lisp
  (use-package dired
    :straight (:type built-in)
    :custom
    (dired-listing-switches "-alGh --group-directories-first"))
#+end_src

=dired-x= is an extension for =dired=. It's availible out of the box, but is not enabled by default.

#+begin_src emacs-lisp
  (use-package dired-x
    :straight (:type built-in)
    :after dired)
#+end_src

** Window Management

Emacs can do more than just edit files! With a couple of packages, Emacs can start to feel like a complete operating system.

*** EXWM

The holy grail of Emacs packages. EXWM allows Emacs to manage X11 windows as buffers.

#+begin_src emacs-lisp
  (use-package perspective-exwm
    :straight t
    :after perspective
    :custom
    (perspective-exwm-override-initial-name
     '((0 . "main"))))

  (use-package exwm
    :straight t
    :after perspective-exwm
    :hook
    (exwm-update-title . (lambda () (exwm-workspace-rename-buffer exwm-title)))
    :config
    (setq exwm-input-global-keys
          `(([?\M-r] . exwm-reset)
            ([?\M-d] . (lambda (cmd)
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command cmd nil cmd)))))
    (perspective-exwm-mode)
    (exwm-enable))
#+end_src

*** Perspective

Create workspace-like "perspectives" that each have their own buffer list.

#+begin_src emacs-lisp
  (use-package perspective
    :straight t
    :defer t
    :custom (persp-mode-prefix-key (kbd "C-x C-x"))
    :bind
    ("C-x b" . persp-list-buffers)
    :init (persp-mode))
#+end_src

** UI

Emacs UI is functional, but not very pretty. Let's fix that.

*** Theme

**** Modus Themes

Customizable high contrast themes.

#+begin_src emacs-lisp
  (use-package modus-themes
    :straight (:type built-in)
    :custom
    (modus-vivendi-palette-overrides
     '((bg-main               "#1e1e2e")
       (bg-mode-line-active   "#313244")
       (bg-mode-line-inactive "#181825")))
    :init
    (load-theme 'modus-vivendi :no-confirm))
#+end_src

**** Rainbow Delimiters

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Modeline

**** Doom Modeline

Replaces the modeline. This package is also used in Doom Emacs.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :straight t
    :hook (after-init . doom-modeline-mode)
    :custom
    (doom-modeline-bar-width 10)
    :custom-face
    (doom-modeline-bar       ((t :background "#cba6f7")))
    (doom-modeline-highlight ((t (:background "#b4befe"
                                  :foreground "#313244")))))
#+end_src

*** Minibuffer

**** Vertico

Replaces the completion UI.

#+begin_src emacs-lisp
  (use-package vertico
    :straight t
    :defer t
    :commands vertico-mode
    :hook (after-init . vertico-mode))
#+end_src

**** Orderless

Matching styles for completions.

#+begin_src emacs-lisp
  (use-package orderless
    :straight t
    :custom
    (completion-styles '(orderless basic))
    (orderless-matching-styles '(orderless-literal
                                 orderless-regexp
                                 orderless-flex))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

**** Marginalia

Adds descriptions next to completion candidates in Vertico.

#+begin_src emacs-lisp
  (use-package marginalia
    :straight t
    :defer t
    :commands (marginalia-mode marginalia-cycle)
    :hook (after-init . marginalia-mode))
#+end_src

** Modes

*** Nix Mode

#+begin_src emacs-lisp
  (use-package nix-mode
    :straight t
    :mode "\\.nix\\'")
#+end_src

** Extra Functionality

*** Eat

#+begin_src emacs-lisp
  (use-package eat
    :straight t
    :custom
    (eat-shell "/run/current-system/sw/bin/nu")
    :bind
    (:map eat-semi-char-mode-map
  	("<escape>" . eat-self-input))
    :config
    (unbind-key "M-d" eat-semi-char-mode-map))
#+end_src

*** Magit

#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :defer t)
#+end_src

*** Embark

#+begin_src emacs-lisp
  (use-package embark
    :straight t
    :defer t
    :commands (embark-act
               embark-dwim
               embark-export
               embark-collect
               embark-bindings
               embark-prefix-help-command)
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init
    (setq prefix-help-command #'embark-prefix-help-command)

    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :straight t
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

*** Consult

#+begin_src emacs-lisp
  (use-package consult
    :straight t
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)
           ("C-x b" . consult-buffer)
           ("C-x 4 b" . consult-buffer-other-window)
           ("C-x 5 b" . consult-buffer-other-frame)
           ("C-x t b" . consult-buffer-other-tab)
           ("C-x r b" . consult-bookmark)
           ("C-x p b" . consult-project-buffer)
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)
           ("M-g g" . consult-goto-line)
           ("M-g M-g" . consult-goto-line)
           ("M-g o" . consult-outline)
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)
           ("M-s e" . consult-isearch-history)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)
           ("M-r" . consult-history))

    ;; Enable automatic preview at point in the *Completions* buffer.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    :init
    ;; Optionally configure the register formatting. This improves the register
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    :config
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))
    (setq consult-narrow-key "<"))
#+end_src

* Miscellaneous

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 160)

  (global-visual-line-mode 1)

  (setq display-line-numbers 'relative)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)

  (start-process-shell-command "xsetroot" nil "xsetroot -cursor_name left_ptr")
#+end_src
